/******************************************************************************************************/
描述
给出平面上4条线段，判断这4条线段是否恰好围成一个面积大于0的矩形。

输入
输入第一行是一个整数T(1<=T<=100)，代表测试数据的数量。

每组数据包含4行，每行包含4个整数x1, y1, x2, y2 (0 <= x1, y1, x2, y2 <= 100000)；
其中(x1, y1), (x2,y2)代表一条线段的两个端点。

输出
每组数据输出一行YES或者NO，表示输入的4条线段是否恰好围成矩形。

样例输入
3
0 0 0 1
1 0 1 1
0 1 1 1
1 0 0 0
0 1 2 3
1 0 3 2
3 2 2 3
1 0 0 1
0 1 1 0
1 0 2 0
2 0 1 1
1 1 0 1
样例输出
YES
YES
NO
/******************************************************************************************************/

struct point
{
	int x, y;
	bool operator < (const point& p2) const
	{
		if(x<p2.x || (x==p2.x && y<p2.y))
			return true;
		else
			return false;
	}
	bool operator == (const point& p2) const
	{
		if(x==p2.x && y==p2.y)
			return true;
		else
			return false;
	}
};

struct line
{
	point p1, p2;
};

int judge4Points(line *l)
{
	set<point> s;
	for(int i=0; i<4; i++)
	{
		s.insert(l[i].p1);
		s.insert(l[i].p2);
	}
	return (s.size()==4);
}

int judgeRct(line *l)
{
	for(int i=1; i<4; i++)
	{
		if((l[i].p2.x-l[i].p1.x)*(l[0].p2.x-l[0].p1.x) == -(l[i].p2.y-l[i].p1.y)*(l[0].p2.y-l[0].p1.y))
			continue;
		if((l[i].p2.x-l[i].p1.x)*(l[0].p2.y-l[0].p1.y) == (l[i].p2.y-l[i].p1.y)*(l[0].p2.x-l[0].p1.x))
			continue;
		return false;
	}
	return true;
}

int main()
{
	line l[4];
	int t;
	scanf("%d", &t);
	while(t--)
	{
		for(int i=0; i<4; i++)
			scanf("%d %d %d %d", &l[i].p1.x, &l[i].p1.y, &l[i].p2.x, &l[i].p2.y);
		int flag=0;
		if(judge4Points(l) && judgeRct(l))
			flag=1;
		else
			flag=0;
        if(flag==1)
            cout<<"YES"<<endl;
        else
            cout<<"NO"<<endl;
	}
	return 0;
}


